
Trac10045.hs:6:17: error:
    Found type wildcard ‘_’ standing for ‘t0 -> a0 -> t1’
    Where: ‘t0’ is a rigid type variable bound by
                the inferred type of copy :: Num a0 => t0 -> a0 -> t1
                at Trac10045.hs:7:9
           ‘t1’ is a rigid type variable bound by
                the inferred type of copy :: Num a0 => t0 -> a0 -> t1
                at Trac10045.hs:7:9
           ‘a0’ is a rigid type variable bound by
                the inferred type of copy :: Num a0 => t0 -> a0 -> t1
                at Trac10045.hs:7:9
    To use the inferred type, enable PartialTypeSignatures
    Relevant bindings include
      ws1 :: () (bound at Trac10045.hs:5:11)
      foo :: Meta -> r0 (bound at Trac10045.hs:5:1)
    In the type signature for:
      copy :: _
    In the expression:
      let
        copy :: _
        copy w from = copy w 1
      in copy ws1 1
    In an equation for ‘foo’:
        foo (Meta ws1)
          = let
              copy :: _
              copy w from = copy w 1
            in copy ws1 1

Trac10045.hs:7:9: error:
    No instance for (Num a)
    When checking that ‘copy’ has the inferred type
      copy :: forall t0 t1 a0. t0 -> a0 -> t1
    Probable cause: the inferred type is ambiguous
    In the expression:
      let
        copy :: _
        copy w from = copy w 1
      in copy ws1 1
    In an equation for ‘foo’:
        foo (Meta ws1)
          = let
              copy :: _
              copy w from = copy w 1
            in copy ws1 1
