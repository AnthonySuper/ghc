TYPE SIGNATURES
  meth1 :: forall a. C1 a => a -> a
  meth3 :: forall a. C3 a => a -> Syn1 a
TYPE CONSTRUCTORS
  class C1 a where
    meth1 :: a -> a
    {-# MINIMAL meth1 #-}
  class C3 a where
    meth3 :: a -> Syn1 a
    {-# MINIMAL meth3 #-}
  type Syn1 a = [a]
COERCION AXIOMS
  axiom Roles4.N:C1 :: C1 a = a -> a -- Defined at Roles4.hs:6:1
  axiom Roles4.N:C3 ::
    C3 a = a -> Syn1 a -- Defined at Roles4.hs:11:1
Dependent modules: []
Dependent packages: [base-4.10.0.0, ghc-prim-0.5.0.0,
                     integer-gmp-1.0.0.1]

==================== Typechecker ====================
Roles4.$tcC3
  = GHC.Types.TyCon
      7508642517340826358##
      16938219270597865136##
      Roles4.$trModule
<<<<<<< HEAD
      (GHC.Types.TrNameS "C3"#)
      0
      $krep
=======
      (GHC.Types.TrNameS 2# "C3"#)
>>>>>>> c0e6759aeb... Create (# Int#, Addr# #) pairs for strings and pass that to unpackCString#
Roles4.$tc'C:C3
  = GHC.Types.TyCon
      3133378316178104365##
      15809386433947157376##
      Roles4.$trModule
<<<<<<< HEAD
      (GHC.Types.TrNameS "'C:C3"#)
      1
      $krep
=======
      (GHC.Types.TrNameS 5# "'C:C3"#)
>>>>>>> c0e6759aeb... Create (# Int#, Addr# #) pairs for strings and pass that to unpackCString#
Roles4.$tcC1
  = GHC.Types.TyCon
      13392243382482428602##
      1780037961948725012##
      Roles4.$trModule
<<<<<<< HEAD
      (GHC.Types.TrNameS "C1"#)
      0
      $krep
=======
      (GHC.Types.TrNameS 2# "C1"#)
>>>>>>> c0e6759aeb... Create (# Int#, Addr# #) pairs for strings and pass that to unpackCString#
Roles4.$tc'C:C1
  = GHC.Types.TyCon
      3870707671502302648##
      10631907186261837450##
      Roles4.$trModule
<<<<<<< HEAD
      (GHC.Types.TrNameS "'C:C1"#)
      1
      $krep
$krep [InlPrag=[~]] = GHC.Types.KindRepVar 0
$krep [InlPrag=[~]] = GHC.Types.KindRepFun $krep $krep
$krep [InlPrag=[~]] = GHC.Types.KindRepFun $krep $krep
$krep [InlPrag=[~]] = GHC.Types.KindRepFun $krep $krep
$krep [InlPrag=[~]] = GHC.Types.KindRepFun $krep $krep
$krep [InlPrag=[~]] = GHC.Types.KindRepFun GHC.Types.krep$* $krep
$krep [InlPrag=[~]]
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] ((:) $krep [])
$krep [InlPrag=[~]]
  = GHC.Types.KindRepTyConApp GHC.Types.$tcConstraint []
$krep [InlPrag=[~]]
  = GHC.Types.KindRepTyConApp Roles4.$tcC3 ((:) $krep [])
$krep [InlPrag=[~]]
  = GHC.Types.KindRepTyConApp Roles4.$tcC1 ((:) $krep [])
=======
      (GHC.Types.TrNameS 5# "'C:C1"#)
>>>>>>> c0e6759aeb... Create (# Int#, Addr# #) pairs for strings and pass that to unpackCString#
Roles4.$trModule
  = GHC.Types.Module
      (GHC.Types.TrNameS 4# "main"#) (GHC.Types.TrNameS 6# "Roles4"#)

